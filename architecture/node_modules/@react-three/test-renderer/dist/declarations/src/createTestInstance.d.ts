import { Object3D } from 'three';
import type { MockInstance, MockScene, Obj } from './types/internal';
export declare class ReactThreeTestInstance<TInstance extends Object3D = Object3D> {
    _fiber: MockInstance;
    constructor(fiber: MockInstance | MockScene);
    get instance(): Object3D;
    get type(): string;
    get props(): Obj;
    get parent(): ReactThreeTestInstance | null;
    get children(): ReactThreeTestInstance[];
    get allChildren(): ReactThreeTestInstance[];
    private getChildren;
    find: (decider: (node: ReactThreeTestInstance) => boolean) => ReactThreeTestInstance;
    findAll: (decider: (node: ReactThreeTestInstance) => boolean) => ReactThreeTestInstance[];
    findByType: (type: string) => ReactThreeTestInstance;
    findAllByType: (type: string) => ReactThreeTestInstance[];
    findByProps: (props: Obj) => ReactThreeTestInstance;
    findAllByProps: (props: Obj) => ReactThreeTestInstance[];
}
export declare const wrapFiber: (fiber: MockInstance | MockScene) => ReactThreeTestInstance;
