import type { Camera, RenderProps } from '@react-three/fiber';
import { ReactThreeTestInstance } from '../createTestInstance';
import type { MockEventData, CreateCanvasParameters } from './internal';
export { ReactThreeTestInstance };
export declare type MockSyntheticEvent = {
    camera: Camera;
    stopPropagation: () => void;
    target: ReactThreeTestInstance;
    currentTarget: ReactThreeTestInstance;
    sourceEvent: MockEventData;
    [key: string]: any;
};
export declare type CreateOptions = CreateCanvasParameters & RenderProps<HTMLCanvasElement>;
export declare type Act = (cb: () => Promise<any>) => Promise<any>;
export declare type Renderer = {
    scene: ReactThreeTestInstance;
    unmount: () => Promise<void>;
    getInstance: () => null | unknown;
    update: (el: React.ReactNode) => Promise<void>;
    toTree: () => Tree | undefined;
    toGraph: () => SceneGraph | undefined;
    fireEvent: (element: ReactThreeTestInstance, handler: string, data?: MockEventData) => Promise<any>;
    advanceFrames: (frames: number, delta: number | number[]) => Promise<void>;
};
export interface SceneGraphItem {
    type: string;
    name: string;
    children: SceneGraphItem[] | null;
}
export declare type SceneGraph = SceneGraphItem[];
export interface TreeNode {
    type: string;
    props: {
        [key: string]: any;
    };
    children: TreeNode[];
}
export declare type Tree = TreeNode[];
